# Config for multi-device full finetuning in full_finetune_distributed.py
# using a gemma 2B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download google/gemma-2b --output-dir /tmp/gemma-2b --ignore-patterns "*.gguf"
#
# To launch on a single device, run the following command from root:
#   tune run full_finetune_single_device --config gemma/2B_full_single_device
#
# This config works only for training on single device.

# Tokenizer
tokenizer:
  _component_: torchtune.models.gemma.gemma_tokenizer
  path: /tmp/gemma-2b/tokenizer.model

# Dataset
dataset:
  _component_: torchtune.datasets.alpaca_dataset
  train_on_input: True
seed: null
shuffle: True

# Model Arguments
model:
  _component_: torchtune.models.gemma.gemma_2b

checkpointer:
  _component_: torchtune.utils.FullModelHFCheckpointer
  checkpoint_dir: /tmp/gemma-2b/
  checkpoint_files: [
    model-00001-of-00002.safetensors,
    model-00002-of-00002.safetensors,
  ]
  recipe_checkpoint: null
  output_dir: /tmp/gemma-2b
  model_type: GEMMA
resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 1
epochs: 1
optimizer:
  _component_: torch.optim.AdamW
  lr: 2e-5
optimizer_in_bwd: False
loss:
  _component_: torch.nn.CrossEntropyLoss
max_steps_per_epoch: null
gradient_accumulation_steps: 1
compile: False

# Training env
device: cuda

# Memory management
enable_activation_checkpointing: True

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.utils.metric_logging.DiskLogger
  log_dir: ${output_dir}
output_dir: /tmp/gemma-2b/logs
log_every_n_steps: 1
log_peak_memory_stats: True
